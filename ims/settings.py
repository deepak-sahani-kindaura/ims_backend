"""
Django settings for ims project.

Generated by 'django-admin startproject' using Django 5.0.13.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
import json
from pathlib import Path

from utils.functions import is_test
from utils.version import get_version_str
from utils.disable_print import disable_print


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Read the env.json file
def load_env():
    """
    Load the env.json file
    """
    is_running_test = "test" in sys.argv

    if is_running_test:
        # If running tests, use the test configuration
        env_file = "config/env_test.json"
    else:
        # Otherwise, use the default configuration
        env_file = "config/env.json"

    with open(BASE_DIR / env_file, "r", encoding="UTF-8") as config_file:
        return json.load(config_file)


config = load_env()

ENV = config["ENV"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-e-ytxj9-jyp4&6z&--8&ib_t95p(@!wx#96k6b-o^kc_5^p)ls"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = config["ALLOWED_HOSTS"]

PROJECT_NAME = config["PROJECT_NAME"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = ["rest_framework", "drf_spectacular", "corsheaders"]
INSTALLED_APPS += THIRD_PARTY_APPS

MY_APPS = [
    "audit_logs",
    "tenant",
    "auth_user",
    "monitor",
    "cmds",
    "category",
    "product",
    "supplier",
    "stock",
    "notification",
]

INSTALLED_APPS += MY_APPS

CORS_ALLOW_ALL_ORIGINS = True

AUTH_USER_MODEL = "auth_user.User"

TOKEN_AUTHENTICATION_CLASS = "authentication.token.TokenAuthentication"

DEFAULT_AUTHENTICATION_CLASSES = [TOKEN_AUTHENTICATION_CLASS]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "middleware.sub_dm.AttachSubdomainToRequestMiddleware",
    "middleware.exc.DRFExceptionMiddleware",
    "middleware.res.AddResponseHeadersMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = f"{PROJECT_NAME.lower()}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = f"{PROJECT_NAME.lower()}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = config["DATABASES"]

CACHES = config["CACHES"]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

APPEND_SLASH = False

DISABLE_PRINT = config["DISABLE_PRINT"]

if DISABLE_PRINT:
    disable_print()


# Static files (CSS, JavaScript,> Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.getenv("STATIC_ROOT", os.path.join(BASE_DIR, "static"))

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{asctime}] {levelname}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                LOG_DIR, f"{PROJECT_NAME.lower() + '_test' if is_test() else ''}.log"
            ),
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 5,  # Keeps up to 5 backup log files
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        PROJECT_NAME: {
            "handlers": ["file", "console"] if not is_test() else ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "TRAILING_SLASH": False,
    "DEFAULT_AUTHENTICATION_CLASSES": [],
}

DESC = "This Django-based Inventory Management System (IMS) is a scalable, multi-tenant backend application built " \
"to manage inventory operations across  multiple tenants. It supports fine-grained access control, optimized API routing, " \
"and production-ready deployment with Docker and Nginx."


SPECTACULAR_SETTINGS = {
    "TITLE": "Inventory Management System(IMS)",
    "DESCRIPTION": DESC,
    "VERSION": get_version_str(),
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "displayOperationId": True,
    },
    "SERVE_AUTHENTICATION": [],
    "SECURITY": [{"TokenAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "TokenAuth": {
                "type": "http",
                "scheme": "bearer",
            }
        }
    },
    "PREPROCESSING_HOOKS": [
        "ims.swagger.doc_filter.domain_based_preprocessing_hook",
    ],
}
